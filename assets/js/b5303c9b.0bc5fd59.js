"use strict";(self.webpackChunkapache_streampark_website=self.webpackChunkapache_streampark_website||[]).push([[7402],{15680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>g});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),u=a,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return r?t.createElement(g,s(s({ref:n},p),{},{components:r})):t.createElement(g,s({ref:n},p))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},69177:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(58168),a=(r(96540),r(15680));const o={id:"docker-deployment",title:"Docker Tutorial",sidebar_position:4},s=void 0,i={unversionedId:"user-guide/docker-deployment",id:"user-guide/docker-deployment",title:"Docker Tutorial",description:"This tutorial uses the docker method to deploy StreamPark via Docker.",source:"@site/docs/user-guide/4-dockerDeployment.md",sourceDirName:"user-guide",slug:"/user-guide/docker-deployment",permalink:"/docs/user-guide/docker-deployment",draft:!1,editUrl:"https://github.com/apache/incubator-streampark-website/edit/dev/docs/user-guide/4-dockerDeployment.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"docker-deployment",title:"Docker Tutorial",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Development Guide",permalink:"/docs/user-guide/development"},next:{title:"LDAP Tutorial",permalink:"/docs/user-guide/LDAP"}},l={},c=[{value:"Prepare",id:"prepare",level:2},{value:"1. Install docker",id:"1-install-docker",level:3},{value:"2. Install docker-compose",id:"2-install-docker-compose",level:3},{value:"Apache StreamPark\u2122 Deployment",id:"apache-streampark-deployment",level:2},{value:"1. Apache StreamPark\u2122 deployment based on h2 and docker-compose",id:"1-apache-streampark-deployment-based-on-h2-and-docker-compose",level:3},{value:"2. Deployment",id:"2-deployment",level:3},{value:"3. Configure flink home",id:"3-configure-flink-home",level:3},{value:"4. Configure flink-session cluster",id:"4-configure-flink-session-cluster",level:3},{value:"5. Submit flink job",id:"5-submit-flink-job",level:3},{value:"Use existing Mysql services",id:"use-existing-mysql-services",level:4},{value:"Use existing Pgsql services",id:"use-existing-pgsql-services",level:4},{value:"Build images based on source code for Apache StreamPark\u2122 deployment",id:"build-images-based-on-source-code-for-apache-streampark-deployment",level:2},{value:"Docker-Compse Configuration",id:"docker-compse-configuration",level:2},{value:"Uploading Configuration to the Container",id:"uploading-configuration-to-the-container",level:2}],p={toc:c},d="wrapper";function m(e){let{components:n,...o}=e;return(0,a.yg)(d,(0,t.A)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This tutorial uses the docker method to deploy StreamPark via Docker."),(0,a.yg)("h2",{id:"prepare"},"Prepare"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"Docker 1.13.1+\nDocker Compose 1.28.0+\n")),(0,a.yg)("h3",{id:"1-install-docker"},"1. Install docker"),(0,a.yg)("p",null,"To start the service with docker, you need to install ",(0,a.yg)("a",{parentName:"p",href:"https://www.docker.com/"},"docker")," first"),(0,a.yg)("h3",{id:"2-install-docker-compose"},"2. Install docker-compose"),(0,a.yg)("p",null,"To start the service with docker-compose, you need to install ",(0,a.yg)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"docker-compose")," first"),(0,a.yg)("h2",{id:"apache-streampark-deployment"},"Apache StreamPark\u2122 Deployment"),(0,a.yg)("h3",{id:"1-apache-streampark-deployment-based-on-h2-and-docker-compose"},"1. Apache StreamPark\u2122 deployment based on h2 and docker-compose"),(0,a.yg)("p",null,"This method is suitable for beginners to learn and become familiar with the features. The configuration will reset after the container is restarted. Below, you can configure Mysql or Pgsql for persistence."),(0,a.yg)("h3",{id:"2-deployment"},"2. Deployment"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/docker-compose.yaml\nwget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/.env\ndocker-compose up -d\n")),(0,a.yg)("p",null,"Once the service is started, StreamPark can be accessed through http://localhost:10000 and also through http://localhost:8081 to access Flink. Accessing the StreamPark link will redirect you to the login page, where the default user and password for StreamPark are admin and streampark respectively. To learn more about the operation, please refer to the user manual for a quick start."),(0,a.yg)("h3",{id:"3-configure-flink-home"},"3. Configure flink home"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(82124).A,width:"1310",height:"498"})),(0,a.yg)("h3",{id:"4-configure-flink-session-cluster"},"4. Configure flink-session cluster"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(77344).A,width:"1302",height:"550"})),(0,a.yg)("p",null,"Note:When configuring the flink-sessin cluster address, the ip address is not localhost, but the host network ip, which can be obtained through ifconfig"),(0,a.yg)("h3",{id:"5-submit-flink-job"},"5. Submit flink job"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(50644).A,width:"1207",height:"627"})),(0,a.yg)("h4",{id:"use-existing-mysql-services"},"Use existing Mysql services"),(0,a.yg)("p",null,"This approach is suitable for enterprise production, where you can quickly deploy StreamPark based on docker and associate it with an online database\nNote: The diversity of deployment support is maintained through the .env configuration file, make sure there is one and only one .env file in the directory"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/docker-compose.yaml\nwget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/mysql/.env\nvim .env\n")),(0,a.yg)("p",null,'First, you need to create the "streampark" database in MySQL, and then manually execute the corresponding SQL found in the schema and data for the relevant data source.'),(0,a.yg)("p",null,"After that, modify the corresponding connection information."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"SPRING_PROFILES_ACTIVE=mysql\nSPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/streampark?useSSL=false&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8\nSPRING_DATASOURCE_USERNAME=root\nSPRING_DATASOURCE_PASSWORD=streampark\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"docker-compose up -d\n")),(0,a.yg)("h4",{id:"use-existing-pgsql-services"},"Use existing Pgsql services"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"wget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/docker-compose.yaml\nwget https://raw.githubusercontent.com/apache/incubator-streampark/dev/deploy/docker/pgsql/.env\nvim .env\n")),(0,a.yg)("p",null,"Modify the corresponding connection information"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"SPRING_PROFILES_ACTIVE=pgsql\nSPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/streampark?stringtype=unspecified\nSPRING_DATASOURCE_USERNAME=postgres\nSPRING_DATASOURCE_PASSWORD=streampark\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker-compose up -d\n")),(0,a.yg)("h2",{id:"build-images-based-on-source-code-for-apache-streampark-deployment"},"Build images based on source code for Apache StreamPark\u2122 deployment"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"git clone https://github.com/apache/incubator-streampark.git\ncd incubator-streampark/deploy/docker\nvim docker-compose\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"    build:\n      context: ../..\n      dockerfile: deploy/docker/console/Dockerfile\n#    image: ${HUB}:${TAG}\n")),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(17837).A,width:"731",height:"380"})),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"docker-compose up -d\n")),(0,a.yg)("h2",{id:"docker-compse-configuration"},"Docker-Compse Configuration"),(0,a.yg)("p",null,"The docker-compose.yaml file will reference the configuration from the env file, and the modified configuration is as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"version: '3.8'\nservices:\n  ## streampark-console container\n  streampark-console:\n    ## streampark image\n    image: apache/streampark:latest\n    ## streampark image startup command\n    command: ${\n   RUN_COMMAND}\n    ports:\n      - 10000:10000\n    ## Environment configuration file\n    env_file: .env\n    environment:\n      ## Declare environment variable\n      HADOOP_HOME: ${\n   HADOOP_HOME}\n    volumes:\n      - flink:/streampark/flink/${\n   FLINK}\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /etc/hosts:/etc/hosts:ro\n      - ~/.kube:/root/.kube:ro\n    privileged: true\n    restart: unless-stopped\n    networks:\n      - streampark\n\n  ## flink-jobmanager container\n  flink-jobmanager:\n    image: ${\n   FLINK_IMAGE}\n    ports:\n      - \"8081:8081\"\n    command: jobmanager\n    volumes:\n      - flink:/opt/flink\n    env_file: .env\n    restart: unless-stopped\n    privileged: true\n    networks:\n      - streampark\n\n  ## streampark-taskmanager container\n  flink-taskmanager:\n    image: ${\n   FLINK_IMAGE}\n    depends_on:\n      - flink-jobmanager\n    command: taskmanager\n    deploy:\n      replicas: 1\n    env_file: .env\n    restart: unless-stopped\n    privileged: true\n    networks:\n      - streampark\n\nnetworks:\n  streampark:\n    driver: bridge\n\nvolumes:\n  flink:\n")),(0,a.yg)("p",null,"Finally, execute the start command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"cd deploy/docker\ndocker-compose up -d\n")),(0,a.yg)("p",null,"You can use ",(0,a.yg)("inlineCode",{parentName:"p"},"docker ps")," to check if the installation was successful. If the following information is displayed, it indicates a successful installation:"),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(36523).A,width:"1080",height:"134"})),(0,a.yg)("h2",{id:"uploading-configuration-to-the-container"},"Uploading Configuration to the Container"),(0,a.yg)("p",null,"In the previous ",(0,a.yg)("inlineCode",{parentName:"p"},"env")," file, ",(0,a.yg)("inlineCode",{parentName:"p"},"HADOOP_HOME"),' was declared, with the corresponding directory being "/streampark/hadoop". Therefore, you need to upload the ',(0,a.yg)("inlineCode",{parentName:"p"},"/etc/hadoop")," from the Hadoop installation package to the ",(0,a.yg)("inlineCode",{parentName:"p"},"/streampark/hadoop")," directory. The commands are as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"## Upload Hadoop resources\ndocker cp entire etc directory streampark-docker_streampark-console_1:/streampark/hadoop\n## Enter the container\ndocker exec -it streampark-docker_streampark-console_1 bash\n## Check\nls\n")),(0,a.yg)("p",null,(0,a.yg)("img",{src:r(42095).A,width:"1080",height:"87"})),(0,a.yg)("p",null,"In addition, other configuration files, such as Maven's ",(0,a.yg)("inlineCode",{parentName:"p"},"settings.xml")," file, are uploaded in the same manner."))}m.isMDXComponent=!0},77344:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/remote-c75d520f5a61d9f100c0e1c58d304eb3.png"},50644:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/remoteSubmission-390200dc9d1b5a55add19d303add2698.png"},42095:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/streampark_docker_ls_hadoop-8e7848bd06b4c193ef02d0f722ad006a.png"},36523:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/streampark_docker_ps-c715c198d48a9cffef4731beedef4f94.png"},82124:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/streampark_flinkhome-d6e90dd6fa04a003feef2eb6086ca3c3.png"},17837:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/streampark_source_generation_image-6022aab5159e058f0cb295ef4f13f508.png"}}]);